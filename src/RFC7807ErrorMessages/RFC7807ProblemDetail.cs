using System;
using System.Collections.Generic;
using System.Net;
using System.Runtime.Serialization;

namespace DeLoachAero.WebApi
{
    /// <summary>
    /// Core data structure for holding RFC 7807 problem detail information
    /// </summary>
    [DataContract(Name = "problem", Namespace = "urn:ietf:rfc:7807")]
    public class RFC7807ProblemDetail
    {
        /// <summary>
        /// The default "type" value if not explicitly set.  According to the RFC,
        /// this is mainly intended for scenarios where the "status" HTTP status code 
        /// is sufficient to explain the problem.
        /// </summary>
        [IgnoreDataMember]
        public static readonly Uri DefaultType = new Uri("about:blank");

        /// <summary>
        /// From RFC7807:
        /// A URI reference [RFC3986] that identifies the
        /// problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the
        /// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
        /// this member is not present, its value is assumed to be "about:blank".
        /// </summary>
        /// <remarks>
        /// Except for the sole case where the HTTP status code is the only
        /// information being given, you should consider the Type property 
        /// as a required element since this _is_ the machine-readable problem 
        /// description. This is also the namespace for extensions, i.e.
        /// an extension member name is specific to the problem Type value.
        /// </remarks>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public Uri Type { get; set; }

        /// <summary>
        /// From RFC7807:
        /// A short, human-readable summary of the problem
        /// type. It SHOULD NOT change from occurrence to occurrence of the
        /// problem, except for purposes of localization (e.g., using
        /// proactive content negotiation; see[RFC7231], Section 3.4).
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// From RFC7807:
        /// The HTTP status code ([RFC7231], Section 6)
        /// generated by the origin server for this occurrence of the problem.
        /// </summary>
        /// <remarks>
        /// Setting the original http status in the problem data means the caller
        /// can still retrieve it even if any intermediate proxies have
        /// stripped off the original status code from the response.
        /// </remarks>
        [DataMember(Name = "status")]
        public int Status { get; set; }

        /// <summary>
        /// From RFC7807:
        /// A human-readable explanation specific to this occurrence of the problem.
        /// If present, ought to focus on helping the client correct the problem, 
        /// rather than giving debugging information.
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public string Detail { get; set; }

        /// <summary>
        /// From RFC7807:
        /// A URI reference that identifies the specific occurrence of the problem.
        /// It may or may not yield further information if dereferenced.
        /// </summary>
        [DataMember(Name = "instance", EmitDefaultValue = false)]
        public Uri Instance { get; set; }

        /// <summary>
        /// From RFC7807:
        /// A problem type definition MAY specify additional members on the
        /// problem details object.  For example, an extension might use typed
        /// links[RFC5988] to another resource that can be used by machines to
        /// resolve the problem.
        /// If such additional members are defined, their names SHOULD start with
        /// a letter (ALPHA, as per[RFC5234], Appendix B.1) and SHOULD consist
        /// of characters from ALPHA, DIGIT([RFC5234], Appendix B.1), and "_"
        /// (so that it can be serialized in formats other than JSON), and they
        /// SHOULD be three characters or longer.
        /// </summary>
        /// <remarks>
        /// In this implementation, all custom extensions will appear as children 
        /// under a parent property named "extensions". Example:
        /// "extensions": {
        ///     "balance": 30,
        ///     "accounts": [
        ///         "/account/12345",
        ///         "/account/67890"
        ///     ]
        /// }
        /// </remarks>
        [DataMember(Name = "extensions", EmitDefaultValue = false)]
        public Dictionary<string, dynamic> Extensions { get; set; }


        /// <summary>
        /// Default constructor for when you plan to build up the object
        /// manually.
        /// </summary>
        public RFC7807ProblemDetail()
        { }

        /// <summary>
        /// Constructor taking only the HTTP status code, and setting Type and Title
        /// to appropriate values per the RFC
        /// </summary>
        public RFC7807ProblemDetail(HttpStatusCode httpStatus)
        {
            Type = DefaultType;
            Status = (int)httpStatus;
            try
            {
                Title = Enum.GetName(typeof(HttpStatusCode), httpStatus);
            }
            catch { };
        }

        /// <summary>
        /// Minimal constructor taking only the HTTP status code and the Type URI
        /// </summary>
        public RFC7807ProblemDetail(HttpStatusCode httpStatus, Uri type)
        {
            Status = (int)httpStatus;
            Type = type;
        }

    }
}